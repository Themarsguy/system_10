============================
SIMPLE EXAM PROJECT SETUP
============================

# 1. CLONE THE PROJECT

git clone <your-repo-url>
cd <project-folder>

# 2. BACKEND SETUP

cd backend

# Install backend dependencies (MongoDB or MySQL):
npm install express mongoose cors dotenv jsonwebtoken bcryptjs

# If using MySQL, also install:
npm install mysql2

# Create .env file (edit values as needed):
# For MongoDB:
# MONGODB_URI=mongodb://localhost:27017/cprsm
# PORT=5000
# JWT_SECRET=your_secret_key
#
# For MySQL:
# MYSQL_HOST=localhost
# MYSQL_USER=root
# MYSQL_PASSWORD=
# MYSQL_DATABASE=cprsm
# PORT=5000
# JWT_SECRET=your_secret_key

# Start backend (choose one):
# For MongoDB:
node server.js
# For MySQL:
node server.mysql.js

# 3. FRONTEND SETUP

cd ../frontend

# Install frontend dependencies:
npm install react-router-dom bootstrap axios

# Start frontend:
npm start

# 4. DATABASE SETUP

# For MongoDB: (collections are created automatically)
# For MySQL, run these SQL commands (phpMyAdmin, MySQL Workbench, or terminal):

CREATE DATABASE IF NOT EXISTS cprsm;
USE cprsm;
CREATE TABLE IF NOT EXISTS users (
  id INT AUTO_INCREMENT PRIMARY KEY,
  email VARCHAR(255) NOT NULL,
  password VARCHAR(255) NOT NULL
);
CREATE TABLE IF NOT EXISTS products (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  price DECIMAL(10,2) NOT NULL
);
# Insert a user (plain text password):
INSERT INTO users (email, password) VALUES ('test@test.com', '123456');

# 5. LOGIN
# Use on the login page:
# Email: test@test.com
# Password: 123456

============================
CHANGING ENTITY (e.g. product -> car or employee)
============================

# 1. BACKEND
# - In backend/server.js or backend/server.mysql.js:
#   - Change the Product model/table to Car or Employee.
#   - Update field names (e.g., name, price -> model, year, etc.).
#   - Update all routes: /api/products -> /api/cars or /api/employees

# 2. FRONTEND
# - In frontend/src/pages/Home.js and CreateProduct.js:
#   - Change all 'product' to 'car' or 'employee'.
#   - Update table columns and form fields.
#   - Update API URLs: /api/products -> /api/cars or /api/employees

# 3. DATABASE
# - For MySQL, create a new table (cars or employees) with the fields you need.

============================


============================
FULL FILE CODES 
============================

# backend/server.js
```
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const dotenv = require('dotenv');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

dotenv.config();

const app = express();
app.use(cors());
app.use(express.json());

// Connect to MongoDB
mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/cprsm', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
.then(() => console.log('MongoDB connected'))
.catch(err => console.error('MongoDB connection error:', err));

// Define a simple Product model
const Product = mongoose.model('Product', {
  name: String,
  price: Number,
});

// Define a simple User model for authentication
const User = mongoose.model('User', {
  email: String,
  password: String, // Plain text password for exam simplicity
});

const JWT_SECRET = process.env.JWT_SECRET || 'secretkey';

// Login route
app.post('/api/login', async (req, res) => {
  const { email, password } = req.body;
  const user = await User.findOne({ email });
  if (!user) return res.status(400).json({ message: 'Invalid credentials' });
  if (password !== user.password) return res.status(400).json({ message: 'Invalid credentials' });
  const token = jwt.sign({ userId: user._id }, JWT_SECRET, { expiresIn: '1h' });
  res.json({ token });
});

// Middleware to check auth
function auth(req, res, next) {
  const token = req.headers['authorization'];
  if (!token) return res.status(401).json({ message: 'No token' });
  try {
    const decoded = jwt.verify(token, JWT_SECRET);
    req.user = decoded;
    next();
  } catch (err) {
    res.status(401).json({ message: 'Invalid token' });
  }
}

// Route to get all products (protected)
app.get('/api/products', auth, async (req, res) => {
  try {
    const products = await Product.find();
    res.json(products);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// Route to create a product
app.post('/api/products', auth, async (req, res) => {
  const { name, price } = req.body;
  try {
    const product = new Product({ name, price });
    await product.save();
    res.status(201).json(product);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// Route to update a product
app.put('/api/products/:id', auth, async (req, res) => {
  const { name, price } = req.body;
  try {
    const product = await Product.findByIdAndUpdate(
      req.params.id,
      { name, price },
      { new: true }
    );
    res.json(product);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// Route to delete a product
app.delete('/api/products/:id', auth, async (req, res) => {
  try {
    await Product.findByIdAndDelete(req.params.id);
    res.json({ message: 'Product deleted' });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
```

# backend/server.mysql.js
```
const express = require('express');
const cors = require('cors');
const jwt = require('jsonwebtoken');
const mysql = require('mysql2/promise');
require('dotenv').config();

const app = express();
app.use(cors());
app.use(express.json());

const JWT_SECRET = process.env.JWT_SECRET || 'secretkey';

// MySQL connection
const dbConfig = {
  host: process.env.MYSQL_HOST || 'localhost',
  user: process.env.MYSQL_USER || 'root',
  password: process.env.MYSQL_PASSWORD || '',
  database: process.env.MYSQL_DATABASE || 'cprsm',
};

// Middleware to check auth
function auth(req, res, next) {
  const token = req.headers['authorization'];
  if (!token) return res.status(401).json({ message: 'No token' });
  try {
    const decoded = jwt.verify(token, JWT_SECRET);
    req.user = decoded;
    next();
  } catch (err) {
    res.status(401).json({ message: 'Invalid token' });
  }
}

// Login route
app.post('/api/login', async (req, res) => {
  const { email, password } = req.body;
  console.log('Login attempt:', email, password); // Log received credentials
  const conn = await mysql.createConnection(dbConfig);
  const [rows] = await conn.execute('SELECT * FROM users WHERE email = ?', [email]);
  console.log('DB result:', rows); // Log DB result
  await conn.end();
  if (rows.length === 0) return res.status(400).json({ message: 'Invalid credentials' });
  const user = rows[0];
  if (password !== user.password) return res.status(400).json({ message: 'Invalid credentials' });
  const token = jwt.sign({ userId: user.id }, JWT_SECRET, { expiresIn: '1h' });
  res.json({ token });
});

// Get all products
app.get('/api/products', auth, async (req, res) => {
  const conn = await mysql.createConnection(dbConfig);
  const [rows] = await conn.execute('SELECT * FROM products');
  await conn.end();
  res.json(rows);
});

// Create a product
app.post('/api/products', auth, async (req, res) => {
  const { name, price } = req.body;
  const conn = await mysql.createConnection(dbConfig);
  await conn.execute('INSERT INTO products (name, price) VALUES (?, ?)', [name, price]);
  await conn.end();
  res.status(201).json({ name, price });
});

// Update a product
app.put('/api/products/:id', auth, async (req, res) => {
  const { name, price } = req.body;
  const { id } = req.params;
  const conn = await mysql.createConnection(dbConfig);
  await conn.execute('UPDATE products SET name = ?, price = ? WHERE id = ?', [name, price, id]);
  await conn.end();
  res.json({ id, name, price });
});

// Delete a product
app.delete('/api/products/:id', auth, async (req, res) => {
  const { id } = req.params;
  const conn = await mysql.createConnection(dbConfig);
  await conn.execute('DELETE FROM products WHERE id = ?', [id]);
  await conn.end();
  res.json({ message: 'Product deleted' });
});

app.use((req, res, next) => {
  console.log('Request received:', req.method, req.url);
  next();
});

console.log('MySQL server started and routes are being registered');

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`MySQL Server is running on port ${PORT}`);
});
```

# frontend/src/pages/Home.js
```

import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import axios from 'axios';

function Home() {
  const [products, setProducts] = useState([]);
  const navigate = useNavigate();

  useEffect(() => {
    fetchProducts();
  }, []);

  const fetchProducts = async () => {
    try {
      const token = localStorage.getItem('token');
      const res = await axios.get('http://localhost:5000/api/products', {
        headers: { Authorization: token },
      });
      setProducts(res.data);
    } catch (err) {
      if (err.response && err.response.status === 401) {
        navigate('/login');
      }
    }
  };

  const handleDelete = async (id) => {
    try {
      const token = localStorage.getItem('token');
      await axios.delete(`http://localhost:5000/api/products/${id}`, {
        headers: { Authorization: token },
      });
      setProducts(products.filter(product => (product._id || product.id) !== id));
    } catch (err) {
      alert('Failed to delete product');
    }
  };

  const handleLogout = () => {
    localStorage.removeItem('token');
    navigate('/login');
  };

  return (
    <div>
      <nav className="navbar navbar-expand-lg navbar-light bg-light">
        <div className="container">
          <Link className="navbar-brand" to="/home">Home</Link>
          <div className="navbar-nav">
            <Link className="nav-link" to="/home">Home</Link>
            <Link className="nav-link" to="/create-product">Create Product</Link>
            <button className="btn btn-outline-danger ms-3" onClick={handleLogout}>Logout</button>
          </div>
        </div>
      </nav>
      <div className="container mt-4">
        <h2>Products</h2>
        <table className="table">
          <thead>
            <tr>
              <th>Name</th>
              <th>Price</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {products.map(product => (
              <tr key={product._id}>
                <td>{product.name}</td>
                <td>${product.price}</td>
                <td>
                  <Link to={`/create-product?id=${product._id || product.id}`} className="btn btn-warning me-2">Edit</Link>
                  <button className="btn btn-danger" onClick={() => handleDelete(product._id || product.id)}>Delete</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
}

export default Home; 

```

# frontend/src/pages/CreateProduct.js
```

import React, { useState, useEffect } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import axios from 'axios';

function CreateProduct() {
  const [name, setName] = useState('');
  const [price, setPrice] = useState('');
  const [error, setError] = useState('');
  const navigate = useNavigate();
  const location = useLocation();
  const params = new URLSearchParams(location.search);
  const id = params.get('id');

  useEffect(() => {
    if (id) {
      fetchProduct();
    }
    // eslint-disable-next-line
  }, [id]);

  const fetchProduct = async () => {
    try {
      const token = localStorage.getItem('token');
      const res = await axios.get('http://localhost:5000/api/products', {
        headers: { Authorization: token },
      });
      const product = res.data.find(p => (p._id || p.id) === id || String(p._id || p.id) === id);
      if (product) {
        setName(product.name);
        setPrice(product.price);
      }
    } catch (err) {
      setError('Failed to fetch product');
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    const token = localStorage.getItem('token');
    try {
      if (id) {
        await axios.put(`http://localhost:5000/api/products/${id}`,
          { name, price },
          { headers: { Authorization: token } }
        );
      } else {
        await axios.post('http://localhost:5000/api/products',
          { name, price },
          { headers: { Authorization: token } }
        );
      }
      navigate('/home');
    } catch (err) {
      setError('Failed to save product');
    }
  };

  return (
    <div className="container mt-5">
      <div className="row justify-content-center">
        <div className="col-md-6">
          <div className="card">
            <div className="card-header">
              <h3 className="text-center">{id ? 'Edit' : 'Create'} Product</h3>
            </div>
            <div className="card-body">
              {error && <div className="alert alert-danger">{error}</div>}
              <form onSubmit={handleSubmit}>
                <div className="mb-3">
                  <label htmlFor="name" className="form-label">Product Name</label>
                  <input
                    type="text"
                    className="form-control"
                    id="name"
                    value={name}
                    onChange={(e) => setName(e.target.value)}
                    required
                  />
                </div>
                <div className="mb-3">
                  <label htmlFor="price" className="form-label">Price</label>
                  <input
                    type="number"
                    className="form-control"
                    id="price"
                    value={price}
                    onChange={(e) => setPrice(e.target.value)}
                    required
                  />
                </div>
                <button type="submit" className="btn btn-primary w-100">{id ? 'Update' : 'Create'} Product</button>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default CreateProduct; 

```

# frontend/src/pages/Login.js
```

import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';

function Login() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const navigate = useNavigate();

  const handleLogin = async (e) => {
    e.preventDefault();
    setError('');
    try {
      const res = await axios.post('http://localhost:5000/api/login', { email, password });
      localStorage.setItem('token', res.data.token);
      navigate('/home');
    } catch (err) {
      setError('Invalid email or password');
    }
  };

  return (
    <div className="container mt-5">
      <div className="row justify-content-center">
        <div className="col-md-6">
          <div className="card">
            <div className="card-header">
              <h3 className="text-center">Login</h3>
            </div>
            <div className="card-body">
              {error && <div className="alert alert-danger">{error}</div>}
              <form onSubmit={handleLogin}>
                <div className="mb-3">
                  <label htmlFor="email" className="form-label">Email</label>
                  <input
                    type="email"
                    className="form-control"
                    id="email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    required
                  />
                </div>
                <div className="mb-3">
                  <label htmlFor="password" className="form-label">Password</label>
                  <input
                    type="password"
                    className="form-control"
                    id="password"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    required
                  />
                </div>
                <button type="submit" className="btn btn-primary w-100">Login</button>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default Login; 


```

# frontend/src/App.js
```

import React from 'react';
import { BrowserRouter as Router, Route, Routes, Link, Navigate } from 'react-router-dom';
import 'bootstrap/dist/css/bootstrap.min.css';
import Login from './pages/Login';
import Home from './pages/Home';
import CreateProduct from './pages/CreateProduct';

function App() {
  return (
    <Router>
      <div className="App">
        <Routes>
          <Route path="/login" element={<Login />} />
          <Route path="/home" element={<Home />} />
          <Route path="/create-product" element={<CreateProduct />} />
          <Route path="/" element={<Navigate to="/login" />} />
        </Routes>
      </div>
    </Router>
  );
}

export default App;



``` 
